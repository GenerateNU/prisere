{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Prisere API"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "components": {
    "schemas": {},
    "parameters": {}
  },
  "paths": {
    "/users": {
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user with the provided information",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 1
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "companyId": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "firstName",
                  "lastName"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create user response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "companyId": {
                      "type": "string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "id",
                    "firstName",
                    "lastName"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Create user error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Create user error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetches a user by the given ID",
        "description": "Finds the user with the given ID in the database",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successfull fetch of a user from the databse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "firstName",
                    "lastName"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Get User Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "There does not exist any user in the database such that the given id matches their id"
          },
          "500": {
            "description": "Get User Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/company": {
      "get": {
        "summary": "Fetches a user's associated company by the given user ID",
        "description": "Finds the user's company with the given user's ID in the database",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successfull fetch of a user's company from the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "companyId": {
                      "type": "string"
                    },
                    "companyName": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "companyId",
                    "companyName"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Get Company from User",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "There does not exist any user in the database such that the given id matches their id OR there is no such user with the given ID that has a non-null company"
          },
          "500": {
            "description": "Get Company from User",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/companies": {
      "post": {
        "summary": "Create a new company",
        "description": "Creates a new company using a company name and optional Quickbooks import time",
        "tags": [
          "Companies"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "lastQuickBooksImportTime": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Gets a company from the database",
        "description": "Gets a company using the company ID",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "Company fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "lastQuickBooksImportTime": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/companies/quickbooks-import-time": {
      "patch": {
        "summary": "Update a company's lastQuickBooksImportTime",
        "description": "Updates the lastQuickBooksImportTime for a company by ID",
        "tags": [
          "Companies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "importTime": {
                    "type": "string",
                    "format": "date"
                  }
                },
                "required": [
                  "importTime"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "lastQuickBooksImportTime": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/companies/location-address": {
      "get": {
        "summary": "Gets a company's location from the database",
        "description": "Gets a company's locations using the company ID",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "Company locations fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "minLength": 1
                      },
                      "stateProvince": {
                        "type": "string",
                        "minLength": 1
                      },
                      "city": {
                        "type": "string",
                        "minLength": 1
                      },
                      "streetAddress": {
                        "type": "string",
                        "minLength": 1
                      },
                      "postalCode": {
                        "type": "string",
                        "minLength": 1,
                        "pattern": "^\\d+$"
                      },
                      "county": {
                        "type": "string",
                        "minLength": 1
                      },
                      "companyId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    },
                    "required": [
                      "country",
                      "stateProvince",
                      "city",
                      "streetAddress",
                      "postalCode",
                      "companyId"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Get Company Locations Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Get Company Locations Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/disaster": {
      "post": {
        "summary": "Create a new disaster",
        "description": "Creates a new disaster with the provided information",
        "tags": [
          "Disaster"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "disasterNumber": {
                    "type": "number"
                  },
                  "fipsStateCode": {
                    "type": "number",
                    "nullable": true,
                    "minimum": 0,
                    "maximum": 56
                  },
                  "declarationDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "incidentBeginDate": {
                    "type": "string",
                    "nullable": true,
                    "format": "date-time"
                  },
                  "incidentEndDate": {
                    "type": "string",
                    "nullable": true,
                    "format": "date-time"
                  },
                  "fipsCountyCode": {
                    "type": "number",
                    "nullable": true,
                    "minimum": 0,
                    "maximum": 1000
                  },
                  "declarationType": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "designatedArea": {
                    "type": "string"
                  },
                  "designatedIncidentTypes": {
                    "type": "string",
                    "nullable": true
                  },
                  "incidentType": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "disasterNumber",
                  "fipsStateCode",
                  "declarationDate",
                  "incidentBeginDate",
                  "incidentEndDate",
                  "fipsCountyCode",
                  "declarationType",
                  "designatedArea",
                  "designatedIncidentTypes",
                  "incidentType"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A disaster was created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fipsStateCode": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 56
                    },
                    "declarationDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "declarationType": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 2
                    },
                    "designatedIncidentTypes": {
                      "type": "string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "id",
                    "fipsStateCode",
                    "declarationDate",
                    "declarationType",
                    "designatedIncidentTypes"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Creating Disaster Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Creating Disaster Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all disasters",
        "description": "Gets all disasters stored in the database",
        "tags": [
          "Disaster"
        ],
        "responses": {
          "200": {
            "description": "Retrieved all disasters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "disasterNumber": {
                        "type": "number"
                      },
                      "fipsStateCode": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 56
                      },
                      "declarationDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "incidentBeginDate": {
                        "type": "string",
                        "nullable": true
                      },
                      "incidentEndDate": {
                        "type": "string",
                        "nullable": true
                      },
                      "fipsCountyCode": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1000,
                        "exclusiveMaximum": true
                      },
                      "declarationType": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 2
                      },
                      "designatedArea": {
                        "type": "string"
                      },
                      "designatedIncidentTypes": {
                        "type": "string",
                        "nullable": true
                      }
                    },
                    "required": [
                      "id",
                      "disasterNumber",
                      "fipsStateCode",
                      "declarationDate",
                      "incidentBeginDate",
                      "incidentEndDate",
                      "fipsCountyCode",
                      "declarationType",
                      "designatedArea",
                      "designatedIncidentTypes"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Getting Disaster Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Getting Disaster Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/location-address": {
      "post": {
        "summary": "Create an address for some location of a company",
        "description": "Creates a new location address with the provided information",
        "tags": [
          "Location Address"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "country": {
                    "type": "string",
                    "minLength": 1
                  },
                  "stateProvince": {
                    "type": "string",
                    "minLength": 1
                  },
                  "city": {
                    "type": "string",
                    "minLength": 1
                  },
                  "streetAddress": {
                    "type": "string",
                    "minLength": 1
                  },
                  "postalCode": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^\\d+$"
                  },
                  "county": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "country",
                  "stateProvince",
                  "city",
                  "streetAddress",
                  "postalCode"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create location address response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string",
                      "minLength": 1
                    },
                    "stateProvince": {
                      "type": "string",
                      "minLength": 1
                    },
                    "city": {
                      "type": "string",
                      "minLength": 1
                    },
                    "streetAddress": {
                      "type": "string",
                      "minLength": 1
                    },
                    "postalCode": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^\\d+$"
                    },
                    "county": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "id",
                    "country",
                    "stateProvince",
                    "city",
                    "streetAddress",
                    "postalCode"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error Creating Location Address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error Creating Location Address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/location-address/{id}": {
      "get": {
        "summary": "Gets an address for some location of a company",
        "description": "Creates a new location address with the provided information",
        "tags": [
          "Location Address"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "The associated location address for the given information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    },
                    "stateProvince": {
                      "type": "string"
                    },
                    "city": {
                      "type": "string"
                    },
                    "streetAddress": {
                      "type": "string"
                    },
                    "postalCode": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^\\d+$"
                    },
                    "county": {
                      "type": "string"
                    },
                    "companyId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fipsStateCode": {
                      "type": "number"
                    },
                    "fipsCountyCode": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "country",
                    "stateProvince",
                    "city",
                    "streetAddress",
                    "postalCode",
                    "companyId",
                    "fipsStateCode",
                    "fipsCountyCode"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error Getting Location Address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The given UUID does not have an associated location address in the database"
          },
          "500": {
            "description": "Error Getting Location Address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes location of a company",
        "description": "Removes the location address with the provided id",
        "tags": [
          "Location Address"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Location successfully deleted"
          },
          "400": {
            "description": "Invalid location ID or no Company with that ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "summary": "Get user notifications",
        "description": "Retrieves all disaster notifications for a specific user with optional filtering and pagination",
        "tags": [
          "Disaster Notifications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "web",
                "email"
              ]
            },
            "required": false,
            "name": "type",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "unread",
                "read",
                "acknowledged"
              ]
            },
            "required": false,
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "femaDisasterId": {
                        "type": "string"
                      },
                      "notificationType": {
                        "type": "string",
                        "enum": [
                          "web",
                          "email"
                        ]
                      },
                      "notificationStatus": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "unread",
                          "read",
                          "acknowledged"
                        ]
                      },
                      "firstSentAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      },
                      "lastSentAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      },
                      "acknowledgedAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      },
                      "createdAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "companyId": {
                            "type": "string",
                            "nullable": true
                          }
                        },
                        "required": [
                          "id",
                          "firstName",
                          "lastName"
                        ]
                      },
                      "femaDisaster": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "disasterNumber": {
                              "type": "number"
                            },
                            "fipsStateCode": {
                              "type": "number",
                              "minimum": 0,
                              "maximum": 56
                            },
                            "declarationDate": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "incidentBeginDate": {
                              "type": "string",
                              "nullable": true
                            },
                            "incidentEndDate": {
                              "type": "string",
                              "nullable": true
                            },
                            "fipsCountyCode": {
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1000,
                              "exclusiveMaximum": true
                            },
                            "declarationType": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "designatedArea": {
                              "type": "string"
                            },
                            "designatedIncidentTypes": {
                              "type": "string",
                              "nullable": true
                            }
                          },
                          "required": [
                            "id",
                            "disasterNumber",
                            "fipsStateCode",
                            "declarationDate",
                            "incidentBeginDate",
                            "incidentEndDate",
                            "fipsCountyCode",
                            "declarationType",
                            "designatedArea",
                            "designatedIncidentTypes"
                          ]
                        }
                      },
                      "locationAddress": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "stateProvince": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "streetAddress": {
                            "type": "string"
                          },
                          "postalCode": {
                            "type": "string",
                            "minLength": 1,
                            "pattern": "^\\d+$"
                          },
                          "county": {
                            "type": "string"
                          },
                          "companyId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fipsStateCode": {
                            "type": "number"
                          },
                          "fipsCountyCode": {
                            "type": "number"
                          },
                          "company": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "lastQuickBooksImportTime": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "country",
                          "stateProvince",
                          "city",
                          "streetAddress",
                          "postalCode",
                          "companyId",
                          "fipsStateCode",
                          "fipsCountyCode",
                          "company"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "userId",
                      "femaDisasterId",
                      "notificationType",
                      "createdAt",
                      "user",
                      "femaDisaster",
                      "locationAddress"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format or query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found or no notifications found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}/markAsRead": {
      "patch": {
        "summary": "Mark notification as read",
        "description": "Marks a specific notification as read and updates readAt timestamp",
        "tags": [
          "Disaster Notifications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification successfully marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "femaDisasterId": {
                      "type": "string"
                    },
                    "notificationType": {
                      "type": "string",
                      "enum": [
                        "web",
                        "email"
                      ]
                    },
                    "notificationStatus": {
                      "type": "string",
                      "nullable": true,
                      "enum": [
                        "unread",
                        "read",
                        "acknowledged"
                      ]
                    },
                    "firstSentAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "lastSentAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "acknowledgedAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "createdAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "userId",
                    "femaDisasterId",
                    "notificationType",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid notification ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}/markUnread": {
      "patch": {
        "summary": "Mark notification as unread",
        "description": "Marks a specific notification as unread and clears the readAt timestamp",
        "tags": [
          "Disaster Notifications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification successfully marked as unread",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "femaDisasterId": {
                      "type": "string"
                    },
                    "notificationType": {
                      "type": "string",
                      "enum": [
                        "web",
                        "email"
                      ]
                    },
                    "notificationStatus": {
                      "type": "string",
                      "nullable": true,
                      "enum": [
                        "unread",
                        "read",
                        "acknowledged"
                      ]
                    },
                    "firstSentAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "lastSentAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "acknowledgedAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "createdAt": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "date"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "userId",
                    "femaDisasterId",
                    "notificationType",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid notification ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notifications/bulk": {
      "post": {
        "summary": "Bulk create notifications",
        "description": "Creates multiple disaster notifications at once for impacted users",
        "tags": [
          "Disaster Notifications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "femaDisasterId": {
                      "type": "string"
                    },
                    "notificationType": {
                      "type": "string",
                      "enum": [
                        "web",
                        "email"
                      ]
                    }
                  },
                  "required": [
                    "userId",
                    "femaDisasterId",
                    "notificationType"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notifications successfully created with createdAt timestamps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "femaDisasterId": {
                        "type": "string"
                      },
                      "notificationType": {
                        "type": "string",
                        "enum": [
                          "web",
                          "email"
                        ]
                      },
                      "notificationStatus": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "unread",
                          "read",
                          "acknowledged"
                        ]
                      },
                      "firstSentAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      },
                      "lastSentAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      },
                      "acknowledgedAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "nullable": true
                          }
                        ]
                      },
                      "createdAt": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "date"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "userId",
                      "femaDisasterId",
                      "notificationType",
                      "createdAt"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload or UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User or FEMA Disaster not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to insert some notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}": {
      "delete": {
        "summary": "Delete notification",
        "description": "Permanently deletes a specific notification",
        "tags": [
          "Disaster Notifications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "deletedId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "deletedId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid notification ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notifications/user/markAllAsRead": {
      "patch": {
        "summary": "Mark all notifications as read",
        "description": "Marks all unread notifications for a specific user as read",
        "tags": [
          "Disaster Notifications"
        ],
        "responses": {
          "200": {
            "description": "All notifications successfully marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "updatedCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "success",
                    "updatedCount"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/quickbooks": {
      "get": {
        "summary": "Generates an OAuth URL for the user and redirects them",
        "tags": [
          "quickbooks"
        ],
        "responses": {
          "302": {
            "description": "Redirected to QuickBooks OAuth url"
          }
        }
      }
    },
    "/quickbooks/redirect": {
      "get": {
        "summary": "Syncs a QB OAuth session to our DB",
        "description": "The path where the QuickBooks OAuth server redirects to upon a completed (successful or not) OAuth connection",
        "tags": [
          "quickbooks"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "code",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "state",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "realmId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in through QB",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Did not grant permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoice/bulk": {
      "post": {
        "summary": "Bulk create or update new invoices",
        "description": "Creates new invoices according to the schema. If there is an invoice in the database with the same quickbooks_id, company_id pairing, then it will overwrite it's attributes",
        "tags": [
          "Invoice"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "quickbooksId": {
                      "type": "integer",
                      "minimum": 0,
                      "exclusiveMinimum": true
                    },
                    "totalAmountCents": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "quickbooksDateCreated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "totalAmountCents"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice(s) successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "companyId": {
                        "type": "string"
                      },
                      "quickbooksId": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true
                      },
                      "totalAmountCents": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "lastUpdated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "quickbooksDateCreated": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "id",
                      "companyId",
                      "totalAmountCents",
                      "dateCreated",
                      "lastUpdated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Creating/Updating Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Creating/Updating Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoice/{id}": {
      "get": {
        "summary": "Get invoice by id",
        "description": "Get invoice with matching ID from the database",
        "tags": [
          "Invoice"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved invoice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "companyId": {
                      "type": "string"
                    },
                    "quickbooksId": {
                      "type": "integer",
                      "minimum": 0,
                      "exclusiveMinimum": true
                    },
                    "totalAmountCents": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "dateCreated": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "quickbooksDateCreated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "id",
                    "companyId",
                    "totalAmountCents",
                    "dateCreated",
                    "lastUpdated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Getting Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No Invoice with given UUID found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Getting Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoice": {
      "get": {
        "summary": "Get invoices for a company",
        "description": "Get invoices for a company with pagination params. Note page numbes are 0-indexed.",
        "tags": [
          "Invoice"
        ],
        "parameters": [
          {
            "schema": {
              "type": "number",
              "default": 0
            },
            "required": false,
            "name": "pageNumber",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 20
            },
            "required": false,
            "name": "resultsPerPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved invoice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "companyId": {
                        "type": "string"
                      },
                      "quickbooksId": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true
                      },
                      "totalAmountCents": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "lastUpdated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "quickbooksDateCreated": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "id",
                      "companyId",
                      "totalAmountCents",
                      "dateCreated",
                      "lastUpdated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Getting Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No Invoice with given UUID found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Getting Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoice/bulk/totalIncome": {
      "get": {
        "summary": "Get the summation of invoices for a company in a date range",
        "description": "Get the summation of invoices for a company that were made after the start date and before the end date",
        "tags": [
          "Invoice"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true,
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Found summation successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "total"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Getting Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Getting Invoice Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoice/{id}/lines": {
      "get": {
        "summary": "Get all line items for a given invoice",
        "description": "Get all line item for a given invoice",
        "tags": [
          "Invoice"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved invoice line item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 400
                      },
                      "invoiceId": {
                        "type": "string"
                      },
                      "quickbooksId": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true
                      },
                      "amountCents": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "category": {
                        "type": "string",
                        "maxLength": 100
                      },
                      "quickbooksDateCreated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "lastUpdated": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "id",
                      "invoiceId",
                      "amountCents",
                      "dateCreated",
                      "lastUpdated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Getting Invoice Line Item Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No Invoice Line Item with given UUID found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Getting Invoice Line Item Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/purchase/bulk": {
      "post": {
        "summary": "Create or update a purchase",
        "description": "Creates a new purchase or updates an existing purchase with the provided information",
        "tags": [
          "Purchases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "quickBooksId": {
                      "type": "number"
                    },
                    "totalAmountCents": {
                      "type": "number",
                      "minimum": 0
                    },
                    "isRefund": {
                      "type": "boolean"
                    },
                    "quickbooksDateCreated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "totalAmountCents",
                    "isRefund"
                  ]
                },
                "minItems": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "companyId": {
                        "type": "string",
                        "minLength": 1
                      },
                      "quickBooksId": {
                        "type": "number"
                      },
                      "totalAmountCents": {
                        "type": "number",
                        "minimum": 0
                      },
                      "quickbooksDateCreated": {
                        "type": "string"
                      },
                      "isRefund": {
                        "type": "boolean"
                      },
                      "dateCreated": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "companyId",
                      "totalAmountCents",
                      "isRefund",
                      "dateCreated"
                    ]
                  }
                }
              }
            }
          },
          "201": {
            "description": "Purchase created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "companyId": {
                        "type": "string",
                        "minLength": 1
                      },
                      "quickBooksId": {
                        "type": "number"
                      },
                      "totalAmountCents": {
                        "type": "number",
                        "minimum": 0
                      },
                      "quickbooksDateCreated": {
                        "type": "string"
                      },
                      "isRefund": {
                        "type": "boolean"
                      },
                      "dateCreated": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "companyId",
                      "totalAmountCents",
                      "isRefund",
                      "dateCreated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Create or update purchase error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Purchase not found when attempting to update"
          },
          "500": {
            "description": "Create or update purchase error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/purchase/{id}": {
      "get": {
        "summary": "Fetches a purchase by the given ID",
        "description": "Finds the purchase with the given ID in the database",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful fetch of a purchase from the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1
                    },
                    "companyId": {
                      "type": "string",
                      "minLength": 1
                    },
                    "quickBooksId": {
                      "type": "number"
                    },
                    "totalAmountCents": {
                      "type": "number",
                      "minimum": 0
                    },
                    "quickbooksDateCreated": {
                      "type": "string"
                    },
                    "isRefund": {
                      "type": "boolean"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "lastUpdated": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "companyId",
                    "totalAmountCents",
                    "isRefund",
                    "dateCreated",
                    "lastUpdated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Get purchase error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "There does not exist any purchase in the database such that the given id matches their id"
          },
          "500": {
            "description": "Get purchase error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/purchase": {
      "get": {
        "summary": "Fetches all purchases for a company",
        "description": "Retrieves a paginated list of purchases for the specified company",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "pageNumber",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 20
            },
            "required": false,
            "name": "resultsPerPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful fetch of company purchases from the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "companyId": {
                        "type": "string",
                        "minLength": 1
                      },
                      "quickBooksId": {
                        "type": "number"
                      },
                      "totalAmountCents": {
                        "type": "number",
                        "minimum": 0
                      },
                      "quickbooksDateCreated": {
                        "type": "string"
                      },
                      "isRefund": {
                        "type": "boolean"
                      },
                      "dateCreated": {
                        "type": "string"
                      },
                      "lastUpdated": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "companyId",
                      "totalAmountCents",
                      "isRefund",
                      "dateCreated",
                      "lastUpdated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Get company purchases error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Get company purchases error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/purchase/bulk/totalExpenses": {
      "get": {
        "summary": "Get the summation of purchases for a company in a date range",
        "description": "Get the summation of purchases for a company that were made after the start date and before the end date",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true,
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Found summation successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "total"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Getting Purchase Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Getting Purchase Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/claims": {
      "post": {
        "summary": "Create a new claim",
        "description": "Creates a new claim using a given company ID and disaster ID",
        "tags": [
          "Claims"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disasterId": {
                    "type": "string"
                  }
                },
                "required": [
                  "disasterId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Claim created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ACTIVE",
                        "FILED"
                      ],
                      "default": "ACTIVE"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "companyId": {
                      "type": "string"
                    },
                    "disasterId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "companyId",
                    "disasterId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Create Company Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/claims/company": {
      "get": {
        "summary": "Gets all the claims associated with a company",
        "description": "Gets all the claims for a company using a company ID",
        "tags": [
          "Claims"
        ],
        "responses": {
          "200": {
            "description": "Claims fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "ACTIVE",
                          "FILED"
                        ],
                        "default": "ACTIVE"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "companyId": {
                        "type": "string"
                      },
                      "disasterId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "createdAt",
                      "companyId",
                      "disasterId"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Create Claims Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Claims not found"
          },
          "500": {
            "description": "Create Claims Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/claims/{id}": {
      "delete": {
        "summary": "Deletes a claim from the database",
        "description": "Deletes a claim based off a claim ID",
        "tags": [
          "Claims"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Claim deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Create Claims Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Create Claims Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/claim-locations": {
      "post": {
        "summary": "Create a new claim-location link",
        "description": "Creates a link between a claim and a location using given IDs",
        "tags": [
          "Claim-Locations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "claimId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "locationAddressId": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "claimId",
                  "locationAddressId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Claim-Location link created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "claimId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "locationAddressId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "required": [
                    "id",
                    "claimId",
                    "locationAddressId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Create Claim-Location  Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Create Claim-Location  Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/claim-locations/company": {
      "get": {
        "summary": "Gets all the locations affected by claims for a company",
        "description": "Gets all the locations affected by claims for a company based on the given ID",
        "tags": [
          "Claim-Locations"
        ],
        "responses": {
          "200": {
            "description": "Locations fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "stateProvince": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "streetAddress": {
                        "type": "string"
                      },
                      "postalCode": {
                        "type": "string",
                        "minLength": 1,
                        "pattern": "^\\d+$"
                      },
                      "county": {
                        "type": "string"
                      },
                      "companyId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "fipsStateCode": {
                        "type": "number"
                      },
                      "fipsCountyCode": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "country",
                      "stateProvince",
                      "city",
                      "streetAddress",
                      "postalCode",
                      "companyId",
                      "fipsStateCode",
                      "fipsCountyCode"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Get Claim-Location Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Locations/Company not found"
          },
          "500": {
            "description": "Get Claim-Location Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/claim-locations/claim/{claimId}/location-address/{locationId}": {
      "delete": {
        "summary": "Deletes a claim-location link from the database",
        "description": "Deletes a claim-location link based off the given claim ID and location ID",
        "tags": [
          "Claim-Locations"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "name": "claimId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "name": "locationId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Claim-Location link deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Delete Claim-Location Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Delete Claim-Location Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notifications/preferences": {
      "get": {
        "summary": "Get a user's notificiation preferences",
        "tags": [
          "Preferences"
        ],
        "responses": {
          "200": {
            "description": "Successfully retreived user preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emailEnabled": {
                      "type": "boolean"
                    },
                    "webNotificationsEnabled": {
                      "type": "boolean"
                    },
                    "notificationFrequency": {
                      "type": "string",
                      "enum": [
                        "daily",
                        "weekly"
                      ]
                    }
                  },
                  "required": [
                    "emailEnabled",
                    "webNotificationsEnabled",
                    "notificationFrequency"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Get user notification preferences errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Get user notification preferences errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a user's notificiation preferences",
        "tags": [
          "Preferences"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emailEnabled": {
                    "type": "boolean"
                  },
                  "webNotificationsEnabled": {
                    "type": "boolean"
                  },
                  "notificationFrequency": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "weekly"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully updated user preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emailEnabled": {
                      "type": "boolean"
                    },
                    "webNotificationsEnabled": {
                      "type": "boolean"
                    },
                    "notificationFrequency": {
                      "type": "string",
                      "enum": [
                        "daily",
                        "weekly"
                      ]
                    }
                  },
                  "required": [
                    "emailEnabled",
                    "webNotificationsEnabled",
                    "notificationFrequency"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Update user notification preferences errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Update user notification preferences errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoice/line/bulk": {
      "post": {
        "summary": "Bulk create or update new invoice line items",
        "description": "Creates new invoice line items according to the schema. If there is an invoice line item in the database with the same quickbooks_id, invoice_id pairing, then it will overwrite it's attributes",
        "tags": [
          "InvoiceLineItem"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "maxLength": 400
                    },
                    "invoiceId": {
                      "type": "string"
                    },
                    "quickbooksId": {
                      "type": "integer",
                      "minimum": 0,
                      "exclusiveMinimum": true
                    },
                    "amountCents": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "category": {
                      "type": "string",
                      "maxLength": 100
                    },
                    "quickbooksDateCreated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "invoiceId",
                    "amountCents"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice line items(s) successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 400
                      },
                      "invoiceId": {
                        "type": "string"
                      },
                      "quickbooksId": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true
                      },
                      "amountCents": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "category": {
                        "type": "string",
                        "maxLength": 100
                      },
                      "quickbooksDateCreated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "lastUpdated": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "id",
                      "invoiceId",
                      "amountCents",
                      "dateCreated",
                      "lastUpdated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Creating/Updating Invoice Line Item Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Creating/Updating Invoice Line Item Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoice/line/{id}": {
      "get": {
        "summary": "Get invoice line item by id",
        "description": "Get invoice line item with matching ID from the database",
        "tags": [
          "InvoiceLineItem"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved invoice line item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "maxLength": 400
                    },
                    "invoiceId": {
                      "type": "string"
                    },
                    "quickbooksId": {
                      "type": "integer",
                      "minimum": 0,
                      "exclusiveMinimum": true
                    },
                    "amountCents": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "category": {
                      "type": "string",
                      "maxLength": 100
                    },
                    "quickbooksDateCreated": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "dateCreated": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "id",
                    "invoiceId",
                    "amountCents",
                    "dateCreated",
                    "lastUpdated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Getting Invoice Line Item Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No Invoice line item with given UUID found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Getting Invoice Line Item Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}